{
  "name": "stochasm",
  "version": "0.5.0",
  "description": "Create functions to generate random values.",
  "main": "lib/stochasm.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jprichardson/stochasm"
  },
  "keywords": [
    "random",
    "stochastic",
    "stochator",
    "markov",
    "chain",
    "numbers",
    "normal",
    "distribution"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MPLv2",
  "devDependencies": {
    "should": "~1.3.0",
    "mocha": "*",
    "lodash": "~2.2.1"
  },
  "readme": "Stochasm\n========\n\nA JavaScript component to create functions that generate random values.\n\n\nWhy?\n----\n\nIt can be very useful to generate random numbers that are governed by properties of different types of distributions. Such distributions are useful for modeling numerical behavior and response of systems.\n\n\n\nFork\n----\n\nThis module was forked from https://github.com/heydenberk/stochasm that was created by [Eric Heydenberk](http://twitter.com/heydenberk). Why did I fork it?\n\n- Unmaintained\n- Written in CoffeeScript\n- Not a UMD\n- No tests\n- No support to modify the random number generation\n\nRather than pester Eric about changing any of the above, a fork seemed more reasonable.\n\n\n\nName\n----\n\n`stochasm` is a portmanteau of stochastic and chasm.\n\n\n\nInstall\n-------\n\n### Node.js/Browserify\n\n    npm install --save stochasm\n\n\n### Component\n\n    component install jprichardson/stochasm\n\n\n### Bower\n\n    bower install stochasm\n\n\n### Script\n\n```html\n<script src=\"/path/to/stochasm.js\"></script>\n```\n\n\nUsage\n-----\n\nTo create a `stochasm` object, simply invoke the function and pass it an `options` object with a `kind` property. If not provided, kind is 'float'.\n\nValid kinds include `float`, `integer`, `set`.\n\n\n### Floating-point Decimals\n\nIt's very easy generate a float between 0 and 1.\n\n````js\nvar stochasm = require('stochasm')\n\nvar generator = stochasm()\ngenerator.next(); // 0.9854211050551385\ngenerator.next(); // 0.8784450970124453\ngenerator.next(); // 0.1592887439765036\n````\n\nThis is not very exciting because it simply wraps the built-in `Math.random` method.\n\n\n\n### Floats from an Interval\n\nSpecifying a min and a max allows us to create random numbers in the interval (min, max), not inclusive.\n\n````js\nvar radianGenerator = stochasm({min: 0, max: Math.PI * 2})\nradianGenerator.next(); // 3.7084574239999655\nradianGenerator.next(); // 1.021138034566463\nradianGenerator.next(); // 4.012664264853087\n````\n\n\n\n### Floats from a Normal Distribution\n\nWe can also generate random floats from a normal distribution. Min and max are optional, and when provided will result in truncation of all results outside of [min, max].\n\n````js\nvar testScores = stochasm({mean: 75, stdev: 14, min: 0, max: 100})\ntestScores.next(); // 59.437160028200125\ntestScores.next(); // 80.18612670399554\ntestScores.next(); // 75.81242027226946\n````\n\n\n\n### Integers\n\nFor integers, the interval [min, max] is inclusive.\n\n````js\nvar die = stochasm({kind: \"integer\", min: 1, max: 6})\ndie.next(); // 6\ndie.next(); // 1\ndie.next(); // 2\n````\n\nif `next()` feels out of place for your use case, just rename the method:\n\n```js\ndie.roll = die.next\ndie.roll() //4\n```\n\n## Multiple Results\nIf the `next` method (or a method aliased to it) is passed an integer `n`, it will return an n-length array of results. Using the die instance from the previous example:\n\n````js\ndie.roll(1); // [5]\ndie.roll(2); // [5, 3]\ndie.roll(5); // [6, 3, 6, 6, 5]\n````\n\n\n### From Sets\n\nWe can generate random values from arbitary sets.\n\n````js\nvar dayGenerator = new stochasm({\n\tkind: \"set\",\n\tvalues: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n});\ndayGenerator.next(); // friday\ndayGenerator.next(); // monday \ndayGenerator.next(); // monday\n````\n\t\n\n\n### From Sets with Weights\n\nWhat if we favor the weekend? Well, we can pass `weights`, an array of the same length as `values` consisting of probabilities out of 1 that correspond to `values`.\n\n````js\nvar biasedDayGenerator = new stochasm({\n\tkind: \"set\",\n\tvalues: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"],\n\tweights: [0.1, 0.1, 0.1, 0.1, 0.1, 0.25, 0.25]\n});\nbiasedDayGenerator.next(); // thursday\nbiasedDayGenerator.next(); // sunday \nbiasedDayGenerator.next(); // saturday\n````\n\n\n\n### From Sets Without Replacement\n\nNote: This functionality may be removed.\n\nPassing a `replacement` property with a falsy value will result in each random\nvalue generation to be removed from the set.\n\n````js\nvar chores = new stochasm({\n\tkind: \"set\",\n\tvalues: [\"floors\", \"windows\", \"dishes\"],\n\treplacement: false\n});\nvar myChore = chores.next(); // \"windows\"\nvar yourChore = chores.next(); // \"floors\"\nvar hisChore = chores.next(); // \"dishes\"\nvar noOnesChore = chores.next(); // undefined\n````\n\n\n\n### Mutators\n\n\nThe constructor accepts an optional final argument which is passed the output\nof the random value generator. Its return value becomes the return value of\nnext or its alias. To generate random boolean values, we can do:\n\n````js\nvar booleanGenerator = new stochasm({\n\tkind: \"integer\",\n\tmin: 0,\n\tmax: 1\n}, Boolean);\n\nbooleanGenerator.next(); // false\nbooleanGenerator.next(); // true\nbooleanGenerator.next(); // true\n````\n\nWe can map the previously mentioned `radianGenerator` to the cosine of its values.\n\n````js\nvar radianSineGenerator = new stochasm({\n\tmin: 0,\n\tmax: Math.PI * 2\n}, Math.cos);\nradianSineGenerator.next(); // -0.31173382958096524\nradianSineGenerator.next(); // -0.6424354006937544\nradianSineGenerator.next(); // 0.6475980728835664\n````\n\nMutators remember their previous result and, at each generation, apply the results of a specified stochasm to create a new result.\n\n _(This is functionally equivalent to a Markov chain.)_\n\n````js\nvar drunkardsWalk = new stochasm({\n\tkind: \"integer\",\n\tmin: -1,\n\tmax: 1\n}, function(a, b) { return a + b; });\n\ndrunkardsWalk.value = 0; // Sets the initial value\ndrunkardsWalk.next(10); // [-1, -2, -2, -1, -1, -1, 0, 1, 1, 2]\ndrunkardsWalk.next(10); // [3, 3, 3, 2, 1, 0, -1, 0, 0, 0]\ndrunkardsWalk.next(10); // [0, 1, 0, -1, 0, 0, 1, 2, 1, 1]\n````\n\nLet's model a bank account's balance. How much money might you have after 10 years if you start with $1000, add $1000 every year, and get interest at a random rate between 1% and 5%?\n\n````js\nvar addInterest = function(interestRate, principal) {\n\treturn (principal + 1000) * interestRate;\n};\nvar savingsAccountBalance = new stochasm({\n\tkind: \"float\",\n\tmin: 1.01,\n\tmax: 1.05\n}, addInterest);\n\nsavingsAccountBalance.value = 1000; // Sets the initital value\nsavingsAccountBalance.next(10);\n/*\n[\n\t2096.2402432970703,\n\t3177.3792999428224,\n\t4339.349049328612,\n\t5441.863800747634,\n\t6507.916293297546,\n\t7669.519280743041,\n\t9011.783840249629,\n\t10225.82489660009,\n\t11630.122217972781,\n\t12782.667463879243\n]\n*/\n````\n\n\n\n### Multiple Generators\n\nIf the stochasm function is passed multiple configuration objects, `next` (or its alias) returns an array of each random generated value.\n\nTo generate a random point, we might do:\n\n````js\nvar x = { kind: 'integer', min: 0, max: 480 };\nvar y = { kind: 'integer', min: 0, max: 360 };\nvar mutator = function(values) {\n\treturn {\n\t\tx: values[0],\n\t\ty: values[1]\n\t};\n};\nvar randomPoint = new stochasm(x, y, mutator);\n\nrandomPoint.next(); // { x: 79, y: 65 }\nrandomPoint.next(); // { x: 151, y: 283 }\nrandomPoint.next(); // { x: 5, y: 253 }\n````\n\n\n### Your Own Random Number Generator\n\nWant to bring your own random number generator to the party? Whether you're working with Node.js and want to use `crypto.getRandomValues()` or in the browser and want to use `window.crypto.getRandomValues()`, you can. You could also return a constant to see how your system may respond to certain conditions in testing.\n\nNote: At this time, it's assumed that any function that you set `rand` to will return a number in the range of `[0,1)`.\n\n\n```js\nvar stochasm = require('stochasm')\n\nvar radianGenerator = stochasm({min: 0, max: Math.PI * 2})\nradianGenerator.rand = function() { return 0.4 }\n```\n\n\nCredits\n-------\n\nAs stated above, this code was forked from the Node.js module `stochator` (https://github.com/heydenberk/stochasm) that was created by [Eric Heydenberk](http://twitter.com/heydenberk). Eric Heydenberk deserves much of the credit for coming up with such an awesome idea.\n\n\n\nLicense\n-------\n\nIt made sense to just keep the license the same. MPLv2.\n\n(MPLv2 License)\n\nCopyright 2013, Eric Heydenberk and JP Richardson\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jprichardson/stochasm/issues"
  },
  "homepage": "https://github.com/jprichardson/stochasm",
  "_id": "stochasm@0.5.0",
  "_from": "stochasm@latest"
}
